[gd_scene load_steps=18 format=2]

[ext_resource path="res://parts/character/mannequin.tscn" type="PackedScene" id=1]
[ext_resource path="res://parts/defaults/texture_01.png" type="Texture" id=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Spatial

onready var window_res = get_viewport().size
onready var half_window_res = window_res/2.0

var mouse_pos_blend := Vector2.ZERO

var skel:Skeleton
var p = \"[skeleton_code]\"


var spine_id := -2
var spine1_id := -2
var spine2_id := -2
var neck_id := -2
var head_id := -2
var leftShoulder_id := -2
var leftArm_id := -2
var leftForeArm_id := -2
var leftHand_id := -2
var rightShoulder_id := -2
var rightArm_id := -2
var rightForeArm_id := -2
var rightHand_id := -2

var leftUpLeg_id := -2

var initial_spine_pose:Transform
var initial_spine1_pose:Transform
var initial_spine2_pose:Transform
var initial_neck_pose:Transform
var initial_head_pose:Transform
var initial_leftShoulder_pose:Transform
var initial_leftArm_pose:Transform
var initial_leftForeArm_pose:Transform
var initial_leftHand_pose:Transform
var initial_rightShoulder_pose:Transform
var initial_rightArm_pose:Transform
var initial_rightForeArm_pose:Transform
var initial_rightHand_pose:Transform

var spine_pose:Transform
var spine1_pose:Transform
var spine2_pose:Transform
var neck_pose:Transform
var head_pose:Transform
var leftShoulder_pose:Transform
var leftArm_pose:Transform
var leftForeArm_pose:Transform
var leftHand_pose:Transform
var rightShoulder_pose:Transform
var rightArm_pose:Transform
var rightForeArm_pose:Transform
var rightHand_pose:Transform

var gtime := 0.0

var time_scale = 2

func _ready() -> void:
	skel = $ViewportContainer/mannequin/Armature/Skeleton #$mannequin/Armature/Skeleton
	pprint(\"skeleton: %s\"%skel.get_path())

	spine_id = skel.find_bone(\"Spine\")
	spine1_id = skel.find_bone(\"Spine1\")
	spine2_id = skel.find_bone(\"Spine2\")
	neck_id = skel.find_bone(\"Neck\")
	head_id = skel.find_bone(\"Head\")
	leftShoulder_id = skel.find_bone(\"LeftShoulder\")
	leftArm_id = skel.find_bone(\"LeftArm\")
	leftForeArm_id = skel.find_bone(\"LeftForeArm\")
	leftHand_id = skel.find_bone(\"LeftHand\")
	rightShoulder_id = skel.find_bone(\"RightShoulder\")
	rightArm_id = skel.find_bone(\"RightArm\")
	rightForeArm_id = skel.find_bone(\"RightForeArm\")
	rightHand_id = skel.find_bone(\"RightHand\")

	leftUpLeg_id = skel.find_bone(\"LeftUpLeg\")

	pprint(\"Spine %s\"%spine_id)
	pprint(\"Spine1 %s\"%spine1_id)
	pprint(\"Spine2 %s\"%spine2_id)
	pprint(\"Neck %s\"%neck_id)
	pprint(\"Head %s\"%head_id)

	initial_spine_pose = skel.get_bone_pose(spine_id)
	initial_spine1_pose = skel.get_bone_pose(spine1_id)
	initial_spine2_pose = skel.get_bone_pose(spine2_id)
	initial_neck_pose = skel.get_bone_pose(neck_id)
	initial_head_pose = skel.get_bone_pose(head_id)

	initial_leftShoulder_pose = skel.get_bone_pose(leftShoulder_id)
	initial_leftArm_pose = skel.get_bone_pose(leftArm_id)
	initial_leftForeArm_pose = skel.get_bone_pose(leftForeArm_id)
	initial_leftHand_pose = skel.get_bone_pose(leftHand_id)
	initial_rightShoulder_pose = skel.get_bone_pose(rightShoulder_id)
	initial_rightArm_pose = skel.get_bone_pose(rightArm_id)
	initial_rightForeArm_pose = skel.get_bone_pose(rightForeArm_id)
	initial_rightHand_pose = skel.get_bone_pose(rightHand_id)


func _process(delta: float) -> void:
	gtime += delta

	# --
	spine_pose = initial_spine_pose * Transform().rotated( Vector3.RIGHT, sin(gtime * time_scale) * 0.15)
	skel.set_bone_custom_pose(spine_id, spine_pose )

	spine1_pose = initial_spine1_pose * Transform().rotated( Vector3.RIGHT, sin((gtime-0.4) * time_scale) * 0.25)
	skel.set_bone_custom_pose(spine1_id, spine1_pose )

	spine2_pose = initial_spine2_pose * Transform().rotated( Vector3.RIGHT, sin((gtime-0.8) * time_scale) * 0.65)
	skel.set_bone_custom_pose(spine2_id, spine2_pose )

	neck_pose = initial_neck_pose * Transform().rotated( Vector3.RIGHT, sin((gtime-1.2) * time_scale) * 0.35)
	skel.set_bone_custom_pose(neck_id, neck_pose )

	head_pose = initial_head_pose * Transform().rotated( Vector3.RIGHT, sin((gtime-1.6) * time_scale) * 0.55)
	skel.set_bone_custom_pose(head_id, head_pose )

	# --
	leftShoulder_pose = initial_leftShoulder_pose * Transform().rotated( Vector3.FORWARD, sin((gtime-2.0) * time_scale) * 0.55) #2.0
	skel.set_bone_custom_pose(leftShoulder_id, leftShoulder_pose )

	leftArm_pose = initial_leftArm_pose * Transform().rotated( Vector3.FORWARD, sin((gtime-2.8) * time_scale) * 0.55) #2.4
	skel.set_bone_custom_pose(leftArm_id, leftArm_pose )

	leftForeArm_pose = initial_leftForeArm_pose * Transform().rotated( Vector3.FORWARD, (sin((gtime-3.2) * time_scale) - 1.0 ) * 0.55) #2.8
	skel.set_bone_custom_pose(leftForeArm_id, leftForeArm_pose )

	leftHand_pose = initial_leftHand_pose * Transform().rotated( Vector3.FORWARD, (sin((gtime-3.6) * time_scale) - 1.0 ) * 0.35) #3.2
	skel.set_bone_custom_pose(leftHand_id, leftHand_pose )

	# --
	rightShoulder_pose = initial_rightShoulder_pose * Transform().rotated( Vector3.FORWARD, sin((gtime-2.0) * time_scale) * -0.55) #2.0
	skel.set_bone_custom_pose(rightShoulder_id, rightShoulder_pose )

	rightArm_pose = initial_rightArm_pose * Transform().rotated( Vector3.FORWARD, sin((gtime-2.8) * time_scale) * -0.55) #2.4
	skel.set_bone_custom_pose(rightArm_id, rightArm_pose )

	rightForeArm_pose = initial_rightForeArm_pose * Transform().rotated( Vector3.FORWARD, (sin((gtime-3.2) * time_scale) - 1.0 ) * -0.55) #2.8
	skel.set_bone_custom_pose(rightForeArm_id, rightForeArm_pose )

	rightHand_pose = initial_rightHand_pose * Transform().rotated( Vector3.FORWARD, (sin((gtime-3.6) * time_scale) - 1.0 ) * -0.35) #3.2
	skel.set_bone_custom_pose(rightHand_id, rightHand_pose )

	# --
	$AnimationTree.set(\"parameters/BlendSpace2D/blend_position\", mouse_pos_blend )


func _input(event: InputEvent) -> void:
	if Input.is_action_pressed(\"ui_cancel\"):
		get_tree().quit()

	if event is InputEventMouseMotion:
		mouse_pos_blend.x = event.position.x/window_res.x *2 -1
		mouse_pos_blend.y = event.position.y/window_res.y *2 -1
		#pprint(\"mouse_pos_blend (%0.2f, %0.2f)\"%[mouse_pos_blend.x, mouse_pos_blend.y])


func pprint(msg) -> void:
	print(\"[skeleton_code] %s\"%str(msg))
	


"

[sub_resource type="GDScript" id=13]
script/source = "extends ViewportContainer

onready var window_res = get_viewport().size
export(NodePath) onready var animtree = get_node(animtree)
var mouse_pos:Vector2

var blend : AnimationNodeBlendSpace2D

var ntris := -1
var tria_alpha = 0.15
var tri_colours= [ Color(0.859375, 0.37199, 0.181274, tria_alpha),
	Color(0.307671, 0.765625, 0.179443, tria_alpha),
	Color(0.179443, 0.394682, 0.765625, tria_alpha)]

var default_font


func _ready() -> void:
	yield(owner, \"ready\")
	default_font = Control.new().get_font(\"font\")
	blend = animtree.tree_root.get_node(\"BlendSpace2D\")
	pprint(\"%s (%s)\"%[blend.get_name(), blend.get_class()])
	pprint(\"%s points\"%blend.get_blend_point_count())

	yield(get_tree().create_timer(0.1), \"timeout\")
	ntris = blend.get_triangle_count()
	pprint(\"%s triangles\"%ntris)


func _draw() -> void:
	draw_circle(mouse_pos, 10, Color(0.529412, 0.984314, 0.589828, 0.811765))
	for i in range(ntris):
		var pa:= PoolVector2Array([Vector2.ZERO, Vector2.ZERO, Vector2.ZERO])
		for ti in range(3):
			pa[ti] = ((blend.get_blend_point_position(blend.get_triangle_point(i,ti)) + Vector2.ONE) /2.0) * window_res
		pa = PoolVector2Array( Geometry.offset_polygon_2d( pa, -5.0 )[0])
		draw_colored_polygon(pa, tri_colours[i%3])
		pa.append(pa[0])
		draw_polyline(pa, tri_colours[i%3], 2.5, true)

	for p in range(blend.get_blend_point_count()):
		var pn :String = blend.get_blend_point_node(p).get_animation()
		var pp = ((blend.get_blend_point_position(p) * 0.85 + Vector2.ONE) /2.0) * window_res + Vector2(-20,0)
		draw_string( default_font, pp , pn )


func _input(event: InputEvent) -> void:
	if event is InputEventMouseMotion:
		mouse_pos = Vector2(event.position.x, event.position.y)


func _process(_delta: float) -> void:
	#pprint(\"%s triangles\"%blend.get_triangle_count())
	if ntris > -1:
		update()


func pprint(msg) -> void:
	print(\"[%s] %s\"%[self.get_name(),str(msg)])
"

[sub_resource type="AnimationNodeAnimation" id=2]
animation = "Idle Fists Up-loop"

[sub_resource type="AnimationNodeAnimation" id=3]
animation = "Idle-loop"

[sub_resource type="AnimationNodeAnimation" id=4]
animation = "Idle Standing-loop"

[sub_resource type="AnimationNodeAnimation" id=5]
animation = "Idle Action-loop"

[sub_resource type="AnimationNodeAnimation" id=9]
animation = "Fast Run-loop"

[sub_resource type="AnimationNodeAnimation" id=14]
animation = "Standard Walk-loop"

[sub_resource type="AnimationNodeAnimation" id=15]
animation = "T-Pose-loop"

[sub_resource type="AnimationNodeBlendSpace2D" id=6]
resource_name = "blend"
blend_point_0/node = SubResource( 2 )
blend_point_0/pos = Vector2( 0, 1 )
blend_point_1/node = SubResource( 3 )
blend_point_1/pos = Vector2( 1, 0 )
blend_point_2/node = SubResource( 4 )
blend_point_2/pos = Vector2( 0, -1 )
blend_point_3/node = SubResource( 5 )
blend_point_3/pos = Vector2( -0.9, -0.7 )
blend_point_4/node = SubResource( 9 )
blend_point_4/pos = Vector2( 1, -1 )
blend_point_5/node = SubResource( 14 )
blend_point_5/pos = Vector2( -0.9, 0.9 )
blend_point_6/node = SubResource( 15 )
blend_point_6/pos = Vector2( 1, 1 )

[sub_resource type="AnimationNodeStateMachine" id=7]
states/BlendSpace2D/node = SubResource( 6 )
states/BlendSpace2D/position = Vector2( 818, 282 )
start_node = "BlendSpace2D"
graph_offset = Vector2( 38, 173 )

[sub_resource type="AnimationNodeStateMachinePlayback" id=8]

[sub_resource type="CubeMesh" id=10]
size = Vector3( 100, 1, 100 )
subdivide_width = 10
subdivide_height = 1
subdivide_depth = 10

[sub_resource type="SpatialMaterial" id=11]
albedo_texture = ExtResource( 2 )
uv1_scale = Vector3( 100, 65.375, 100 )

[sub_resource type="BoxShape" id=12]
extents = Vector3( 50, 0.5, 50 )

[node name="Spatial" type="Spatial"]
script = SubResource( 1 )

[node name="ViewportContainer" type="ViewportContainer" parent="."]
margin_right = 40.0
margin_bottom = 40.0
script = SubResource( 13 )
animtree = NodePath("../AnimationTree")

[node name="mannequin" parent="ViewportContainer" instance=ExtResource( 1 )]

[node name="AnimationTree" type="AnimationTree" parent="."]
tree_root = SubResource( 7 )
anim_player = NodePath("../ViewportContainer/mannequin/AnimationPlayer")
active = true
root_motion_track = NodePath("Armature/Skeleton:RootMotion")
parameters/playback = SubResource( 8 )
parameters/BlendSpace2D/blend_position = Vector2( 0.0101118, 0.955556 )

[node name="Camera" type="Camera" parent="."]
transform = Transform( 0.227875, 0.468811, -0.853399, 0, 0.876458, 0.481478, 0.97369, -0.109717, 0.199723, -2.14968, 2.14065, 0.687521 )
fov = 50.2

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 0.226229, -0.838589, 0.495569, -0.378824, 0.392963, 0.837897, -0.897392, -0.37729, -0.228778, 0.619914, 0, 0.211717 )
light_energy = 3.0
light_specular = 1.0
shadow_enabled = true
directional_shadow_mode = 1
directional_shadow_split_1 = 0.039
directional_shadow_split_2 = 1.0
directional_shadow_split_3 = 0.0
directional_shadow_normal_bias = 0.0
directional_shadow_bias_split_scale = 0.203
directional_shadow_max_distance = 82.1

[node name="floormesh" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.5, 0 )
mesh = SubResource( 10 )
material/0 = SubResource( 11 )

[node name="StaticBody" type="StaticBody" parent="floormesh"]

[node name="CollisionShape" type="CollisionShape" parent="floormesh/StaticBody"]
shape = SubResource( 12 )

[editable path="ViewportContainer/mannequin"]
